apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: register-new-component
  title: Register your software with Roadie Backstage
  description: "Create a new PR with a catalog-info.yaml file with your software's details. Optionally configure additional integrations and TechDocs to be created and associated at time of registration."
spec:
  owner: unspecified # TODO: Define who the owner of this template is. This is likely the team who own the relationship with Roadie. e.g. group:customer-name/platform
  type: service

  # These are the steps which are rendered in the frontend with the form input.
  parameters:
    - title: Component Details # Title of the first step.
      required:
        - name
        - description
        - type
        - lifecycle
      properties:
        name:
          title: Component Name
          type: string
          description: The name of the component in Roadie Backstage, typically the same name used in the repository. This will be used to create a human readable title.

        description:
          title: Component Description
          decription: A Detailed decription allows for the component to be easily found and understood in Roadie Backstage.
          type: string

        type:
          title: Component Type
          type: string
          default: service # TODO: Add your most common component type here.
          enum: ['service', 'website', 'test', 'documentation', 'library'] # TODO: What are the types you have?

        lifecycle:
          title: Component Lifecycle
          type: string
          default: production # TODO: Add your most common lifecycle here.
          enum: ['production', 'experimental', 'deprecated'] # TODO: What are the lifecycle environments you have?

        owner:
          title: Component Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              kind: Group # TODO: Decide if you want to allow setting owner by user, group, or both. e.g. [Group, User]

    - title: Component Location # Title of the second step.
      required:
        - repoSlug
      properties:
        repoHost:
          type: string
          default: github.com
          ui:widget: hidden
        repoOrg:
          type: string
          default: roadieHQ # TODO: Add the name of your GitHub org
          ui:widget: hidden
        repoSlug:
          title: Repository Name
          type: string
        entityTags:
          type: array
          ui:field: EntityTagsPicker

    - title: Integrations (optional) # Title of the third step.
      properties: #TODO: Specify any additional integrations associated with your repos.
        argoAppName:
          title: Argo CD App Name
          type: string
        pagerdutyServiceId:
          title: PagerDuty Service ID
          type: string

    - title: TechDocs (optional) # Title of the fourth step.
      type: object
      properties: #TODO: Specify any additional integrations associated with your repos.
        ensableTechDocs:
          title: Enable TechDocs
          default: true
          type: boolean

      if:
        properties:
          ensableTechDocs:
            const: true
        required:
        - ensableTechDocs
      then:
        properties:
          techDocsBody:
            title: Body
            ui:widget: textarea
            ui:options:
              rows: 10
            ui:help: 'This will be your TechDocs initial body. You can change it any time in Roadie Backstage.'
            ui:placeholder: |
              This is a placeholder TechDocs page. Please update me to enable Techdocs, or leave blank for placeholder text.
            type: string
          techDocsPath:
            title: Path
            description: 'The path to the TechDocs directory. This can be a directory in the repository using docs:.; or linked externally using url:{url}.'
            type: string
            default: 'docs:.'
  
  # These are the steps that are executed in series in the scaffolder backend.
  steps:
    - id: fetchCatalogTemplate
      action: fetch:template
      input:
        url: ./skeleton
        templateFileExtension: .njk
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          type: ${{ parameters.type }}
          repoOrg: ${{ parameters.repoOrg }}
          repoSlug: ${{ parameters.repoSlug }}
          argoAppName: ${{ parameters.argoAppName }}
          pagerdutyServiceId: ${{ parameters.pagerdutyServiceId }}
          lifecycle: ${{ parameters.lifecycle }}
          techDocsPath: ${{ parameters.techDocsPath }}

    - id: fetchTechDocsTemplate
      if: ${{ parameters.ensableTechDocs }}
      action: fetch:template
      input:
        url: ./techDocs
        templateFileExtension: .njk
        values:
          repoOrg: ${{ parameters.repoOrg }}
          repoSlug: ${{ parameters.repoSlug }}
          techDocsBody: ${{ parameters.techDocsBody }}

    - id: createPullRequest
      name: createPullRequest
      action: publish:github:pull-request
      input:
        repoUrl: ${{ parameters.repoHost }}?owner=${{ parameters.repoOrg }}&repo=${{ parameters.repoSlug }}
        branchName: register-to-catalog-${{ '' | now }}
        title: Register software to Catalog
        description: This PR adds a metadata file about this catalog entity so that it can be registered in our software catalog, with optional integrations and TechDocs.
  
  # These are the outputs from the backend steps, and can be displayed in the frontend after completion.
  output:
    links:
      - title: View the pull request on GitHub
        icon: github
        url: ${{ steps['createPullRequest'].output.remoteUrl }}